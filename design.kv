<LoginScreen>: 
    name: "login_screen"
    GridLayout:
        cols: 1  # need to attach column attributes to this grid layout object.
        GridLayout:
            cols: 1  # need a column attribute here as well.
            padding: 15, 15 # borders to the edge of the app in pixels. (external) Weird. No CSS required.
            spacing: 20, 20 # between widgets in the grid layout. (internal)
            Label: # a Python object
                text: "User Login"
                font_size: '20sp'
            TextInput: # a Python object
                id: username
                hint_text: "Username"
            TextInput: # a Python object
                id: password
                password: True  # this "stars" your password
                hint_text: "Password"
            RelativeLayout: # do this to ensure that the 0.3 works
                Button: # a Python object
                    text: "Login"
                    on_press: root.login(root.ids.username.text, root.ids.password.text) # the second and third 'root' refer to teh login screen.      
                    size_hint: 0.3, 0.5 # 30% of the width, half the height. We'll need to indent the entire button to make the 0.3 work.
                    pos_hint: {'center_x': 0.5, 'center_y': 0.6}  # to move the button to a middle position. Unsure why he picked 0.6 for y.
                Label:
                    id: login_wrong
                    text: "" 
        GridLayout:
            cols: 2
            size_hint: 0.2, 0.2  # gives the 2 buttons a relative 20% of the footprint. Otherwise, these buttons are immense.
            padding: 10, 10
            spacing: 10, 0
            Button: 
                text: "Forgot Password?"
                background_color: 1, 1, 1, 0 # an RGB value and a completely transparent background
                opacity: 1 if self.state == "normal" else 0.5  # this command creates a signal that the button is being pressed; self refers to the button. .parent woudl access GridLayout.
                color: 0.1, 0.7, 1, 1  # from an RGB schema and a transparency of 1 
            Button: 
                text: "Sign up" 
                background_color: 1, 1, 1, 0 # an RGB value and a completely transparent background
                opacity: 1 if self.state == "normal" else 0.5  # this command creates a signal that the button is being pressed; self refers to the button. .parent woudl access GridLayout.
                color: 0.1, 0.7, 1, 1  # from an RGB schema and a transparency of 1 
                on_press: root.sign_up() # another attribute
                                            # 'root' here refers to the LoginScreen class in the other file
                                            # .sign_up() also refers back to the python file.

<SignUpScreen>
    GridLayout:
        cols: 1
        padding: 20, 20
        spacing: 20, 20
        Label:
            text: "Sign up for a space journey"
        TextInput: 
            id: username  # no quotes, because this is a variable, not a string. It CAN'T be the same as the hint text.
            hint_text: "Username"  # what will be shown in the text field as a hint 
        TextInput:
            id: password
            hint_text: "Password"
        Button:
            text: "Submit"
            on_press: root.add_user(root.ids.username.text, root.ids.password.text) # here, 'root' is class SignUpScreen
                                    # note: 'ids' is a keyword in kivy
                                    # .text will actually display the text itself of the username and password objects.

<SignUpScreenSuccess>
    GridLayout:
        cols: 1
        Label:
            text: "Sign up successful!!"
        Button:
            text: "Login page"
            on_press: root.back_to_login()

<LoginScreenSuccess>
    GridLayout:
        cols: 1
        padding: 30, 30
        spacing: 30, 30
        RelativeLayout:
            ImageButton: # this button inherits from HoverBehavior
                on_press: root.log_out()
                source: "logout_hover.png" if self.hovered else "logout_nothover.png" # hovered is a Boolean inside of hoverable.py
                size_hint: 0.35, 0.35
                pos_hint: {'center_x': 0.93, 'center_y': 0.8} # for thsi to work, the entire widget had to be in a RelativeLayout button.
        Label:
            text: "How do you feel?"
        TextInput:
            id: feeling
            hint_text: "Things to try: happy, sad, unloved, etc... "
        Button:
            text: "Enlighten me"
            on_press: root.get_quote(root.ids.feeling.text)
        ScrollView:  # we make Label a child of ScrollView . Now you can scroll internally within the text field.
            Label:
                id: quote
                text: ""
                text_size: self.width, None # for the text size height, so that it properly re-sizes. 
                # 'self' refers to the current widget. The text will get the width and height of the Label widget that houses it.
                size_hint_y: None  # we're telling the 
                height: self.texture_size[1]  # hard to understand what he's doing here ... we want the second element of some tuple ... 

# Refactored this up above, as RootWidget is above LoginScreen in the hierarchy
<RootWidget>: # an invisible record of all your app's screens
    LoginScreen:
        name: "login_screen" # we'll use this name to refer to the login screen within the Python code
    SignUpScreen:
        name: "sign_up_screen" # note that screens need their own names
    SignUpScreenSuccess:
        name: "sign_up_screen_success" # needs to be the same as the referent from self.manager.current
    LoginScreenSuccess:
        name: "login_screen_success"



